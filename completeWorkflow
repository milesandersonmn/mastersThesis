###############Data preparation VCF filtering######################

##Filter VCF by intergenic bed file

bcftools view -I -O z Schil_capture_variants_Chr1-12.reheader.filtered.vcf.gz \
-R ../bedFiles/intergenic_regions.bed -o Schil_capture_variants_Chr1-12.reheader.filtered.intergenic.vcf.gz

##Filter VCF by high depth intergenic regions

awk '$6=="yes"' intergenic_regions.bed > intergenic_regions_goodDP.bed

bcftools view -I -O z Schil_capture_variants_Chr1-12.reheader.filtered.vcf.gz \
-R ../bedFiles/intergenic_regions_goodDP.bed -o Schil_capture_variants_Chr1-12.reheader.filtered.intergenic.goodDP.vcf.gz

#Filter SI VCF by captus BED regions

#######################Decompose complex variants################################

zcat Schil_capture_variants_Chr1-12.reheader.filtered.intergenic.goodDP.vcf.gz | \
vcfallelicprimitives > Schil_capture_variants_Chr1-12.reheader.filtered.intergenic.goodDP.decomposedVariants.vcf 

bgzip Schil_capture_variants_Chr1-12.reheader.filtered.intergenic.goodDP.decomposedVariants.vcf

zcat VCFs/Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.vcf.gz | \
vcfallelicprimitives > finalWorkflow/VCFs/Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.decomposedVariants.vcf

bgzip finalWorkflow/VCFs/Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.decomposedVariants.vcf 

#######################Create VCFs with no indels###############################

vcftools --gzvcf Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.decomposedVariants.vcf.gz \
--remove-indels --out Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.decomposedVariants.noIndels --recode-INFO-all --recode

bgzip Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.decomposedVariants.noIndels.recode.vcf

bcftools index Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.decomposedVariants.noIndels.recode.vcf.gz

######################Create files to measure VCF stats and apply filtering parameters based on results###########################

VCF=../VCFs/Schil_capture_variants_Chr1-12.reheader.filtered.intergenic.goodDP.decomposedVariants.noIndels.recode.vcf.gz;
OUT=intergenic.goodDP;
vcftools --gzvcf $VCF --freq2 --out $OUT --max-alleles 2;
vcftools --gzvcf $VCF --depth --out $OUT;
vcftools --gzvcf $VCF --site-mean-depth --out $OUT;
vcftools --gzvcf $VCF --site-quality --out $OUT;
vcftools --gzvcf $VCF --missing-indv --out $OUT;
vcftools --gzvcf $VCF --missing-site --out $OUT;
vcftools --gzvcf $VCF --het --out $OUT;

#######################Filter VCF based on R calculated stats###################################

##No MAF

vcftools --gzvcf Schil_capture_variants_Chr1-12.reheader.filtered.intergenic.goodDP.decomposedVariants.noIndels.recode.vcf.gz \
--remove-indels --minQ 30 --minDP 10 --max-missing 0.98 --out intergenicSNPs.noMAF --recode-INFO-all --recode


bcftools view -s ^Spenn_LA0716_ERR418107,\
S.chiCGN15532_1_ERR418097,\
S.chiCGN15530_1_ERR418098,\
Sper_LA1278_ERR418084,\
Sper_LA1954_ERR418094 intergenicSNPs.noMAF.recode.vcf > intergenicSNPs.noMAF.noOutgroup.vcf

##No singletons

vcftools --gzvcf Schil_capture_variants_Chr1-12.reheader.filtered.intergenic.goodDP.decomposedVariants.noIndels.recode.vcf.gz --remove-indels \
--minQ 30 --mac 2 --minDP 10 --max-missing 0.98 --out intergenicSNPs.noSingletons --recode-INFO-all --recode

bcftools view -s ^Spenn_LA0716_ERR418107,\
S.chiCGN15532_1_ERR418097,\
S.chiCGN15530_1_ERR418098,\
Sper_LA1278_ERR418084,\
Sper_LA1954_ERR418094 intergenicSNPs.noSingletons.recode.vcf > intergenicSNPs.noSingletons.noOutgroup.vcf

##Same filtering for SI genes

vcftools --gzvcf Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.decomposedVariants.noIndels.recode.vcf.gz \
--remove-indels --minQ 30 --minDP 10 --max-missing 0.98 --out SISNPs.noMAF --recode-INFO-all --recode


bcftools view -s ^Spenn_LA0716_ERR418107,\
S.chiCGN15532_1_ERR418097,\
S.chiCGN15530_1_ERR418098,\
Sper_LA1278_ERR418084,\
Sper_LA1954_ERR418094 SISNPs.noMAF.recode.vcf > SISNPs.noMAF.noOutgroup.vcf

##No singletons

vcftools --gzvcf Schil_capture_variants_Chr1-12.reheader.filtered.SIgenes.decomposedVariants.noIndels.recode.vcf.gz --remove-indels \
--minQ 30 --mac 2 --minDP 10 --max-missing 0.98 --out SISNPs.noSingletons --recode-INFO-all --recode

bcftools view -s ^Spenn_LA0716_ERR418107,\
S.chiCGN15532_1_ERR418097,\
S.chiCGN15530_1_ERR418098,\
Sper_LA1278_ERR418084,\
Sper_LA1954_ERR418094 SISNPs.noSingletons.recode.vcf > SISNPs.noSingletons.noOutgroup.vcf

####################Print region files from bed files in ANGSD format#############################

##Integenic regions

awk '{print $1":"$2"-"$3}' intergenic_regions_goodDP.bed > ../angsd/intergenic_regions_file.txt

##SI regions

awk '{print $1":"$2"-"$3}' captusSIgenes_150flanking.bed > ../angsd/SI_regions_file.txt

####################Print population names list##################################

awk '{print $2}' populationDefinitions.txt | sort | uniq > populationNames.txt

####################Print bam file list for each population#######################

for i in `cat populationNames.txt`; 
do pop=`echo "$i"`; awk -v var="$pop" '$2~var {print "/data/proj2/popgen/chilense/capture/06_map_calling/"$1"_prop-map.bam";}' \
populationDefinitions.txt > ${i}_accessions.txt ; 
done

####################Create ancestral fasta#######################################

angsd -i /data/proj2/popgen/chilense/capture/06_map_calling/Spenn_LA0716_ERR418107_prop-map.bam -doFasta 1 -doCounts 1 -out ancestralState

###################SFS calculation for loop for all populations in central valleys#######################

for i in `cat ../populations/populationNamesCentralValleys.txt`; do
POPULATION=`echo "$i"`;
angsd -gl 1 -dosaf 1 -anc ancestralState.fa.gz -minMapQ 1 -minQ 20 -out $POPULATION \
-ref ../../../S_chilense_reference_rename.fasta \
-bam ../populations/${POPULATION}_accessions.txt -rf contigNames_ChrOnly_regions_file.txt -P 24;
done

##################Pairwise 2D SFS for all possible combinations using array loop#######################################

##Populate array with population names

mapfile -t populationArray < ../populations/populationNamesCentralValleys.txt

##Calculate the 2dsfs prior pairwise for all combinations using array elements in nested for loop

for ((i = 0; i < ${#populationArray[@]}; i++)); do 
for ((j = i + 1; j < ${#populationArray[@]}; j++)); do 
realSFS ${populationArray[i]}.saf.idx ${populationArray[j]}.saf.idx -P 24 > 2DSFS/${populationArray[i]}.${populationArray[j]}.ml
done;
done 

##"Prepare the fst for easy window analysis etc" 

cd 2Didx

for ((i = 0; i < ${#populationArray[@]}; i++)); do 
for ((j = i + 1; j < ${#populationArray[@]}; j++)); do 
realSFS fst index ../${populationArray[i]}.saf.idx ../${populationArray[j]}.saf.idx -whichFst 1 -sfs \
../2DSFS/${populationArray[i]}.${populationArray[j]}.ml \
-fstout ${populationArray[i]}.${populationArray[j]}
done;
done 

##################Run FST per region for all pairwise combinations####################
cd 2Didx

##Intergenic regions

for j in `ls *.idx`; do
PAIR=`basename -s .fst.idx $j`;
for i in `cat ../intergenic_regions_file.txt`; do
REGION=`echo "$i"`;
realSFS fst stats ${j} -r $REGION | \
grep -o "[[:digit:]].[[:digit:]]*[[:space:]][[:digit:]].[[:digit:]]*" >> ../intergenicFST/${PAIR}.region.intergenic.FST;
done
done

##SI regions

for j in `ls *.idx`; do
PAIR=`basename -s .fst.idx $j`;
for i in `cat ../SI_gene_regions_file.txt`; do
REGION=`echo "$i"`;
realSFS fst stats ${j} -r $REGION | \
grep -o "[[:digit:]].[[:digit:]]*[[:space:]][[:digit:]].[[:digit:]]*" >> ../SIFST/${PAIR}.region.SI.FST;
done
done

