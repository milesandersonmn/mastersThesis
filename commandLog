##Create BED file with 150 bp flanking regions from known positions of SI loci on the reference (150 bp flanking region may capture potential frameshift mutations)
awk -v OFS="\t" '{$2=$2-150;$3=$3+150; print $0;}' selfincompatibility_genes1.bed > selfincompatibility_genes_150flanking.bed

##Filter SI genes from BED file with 150 bp flanking regions
bcftools view -I -O z Schil_capture_variants_Chr1-12.vcf.gz -R selfincompatibility_genes_150flanking.bed -o Schil_capture_variants_Chr1-12.SIgenes.vcf.gz

##grep individual sample names using accession names from samples in VCF
zcat Schil_capture_variants_Chr1-12.SIgenes.vcf.gz | grep -o 'LA2981A_[[:alnum:]]*[[:digit:]]*'

##awk command to print region columns to use in extracting all accessions in a given region
awk 'BEGIN {FS="\t"} ; {if (NR!=1) {print $5}}' selected_pops.txt | sort | uniq

##Extract region 2 column, print all accessions with matching locations to use in VCF population subsetting

IFS=$'\n';
for i in `awk 'BEGIN {FS="\t"} ; {if (NR!=1) {print $5}}' selected_pops.txt | sort | uniq`;do;
region=`echo "$i"`;
fileName=$(echo $region | tr -d ' ' | tr -d \\r );
awk -v region="$region" -F '\t' '$5~region {print $1}' selected_pops.txt > ${fileName}_accessions.txt;
done
unset IFS

##Extract individual sample names from VCF using accession names to subset VCF by subpopulations

while read line;do
region=`basename -s _accessions.txt $line`
for accession in `cat $line`;do 
bcftools view -h Schil_capture_variants_Chr1-12.SIgenes.vcf.gz | grep -o "${accession}_[[:alnum:]]*[[:digit:]]*" \
>> ${region}_Samples.txt;
done
done < regionFileNames.txt

##Subset VCF by region

while read line;do
region=`basename -s _Samples.txt $line`
bcftools view -O z --samples-file populations/$line VCFs/Schil_capture_variants_Chr1-12.SIgenes.vcf.gz -o VCFs/${region}_Schil_capture_variants_Chr1-12.SIgenes.vcf.gz
done < populations/sampleFileNames.txt


############################################
Genetic clustering analysis
############################################

##Filter VCF for neutral SNPs

vcftools --gzvcf Schil_capture_variants_Chr1-12.vcf.gz --thin 100 --remove-indels \
--maf 0.1 --minDP 10 --max-missing 0.75 --out neutralSNPs --recode-INFO-all --recode

##PLINK LD pruning rÂ² of 0.5

plink --vcf neutralSNPs.recode.vcf --indep-pairwise 50 5 0.5 --double-id --allow-extra-chr --set-missing-var-ids @:#

plink --vcf neutralSNPs.recode.vcf --indep-pairwise 50 5 0.5 --double-id --allow-extra-chr \
--extract plink.prune.in --recode vcf --out pruned.neutralSNPs --set-missing-var-ids @:#

##Remove outgroups from

bcftools view -s ^Spenn_LA0716_ERR418107_Spenn_LA0716_ERR418107,\
S.chiCGN15532_1_ERR418097_S.chiCGN15532_1_ERR418097,\
S.chiCGN15530_1_ERR418098_S.chiCGN15530_1_ERR418098,\
Sper_LA1278_ERR418084_Sper_LA1278_ERR418084,\
Sper_LA1954_ERR418094_Sper_LA1954_ERR418094 pruned.neutralSNPs.vcf > pruned.neutralSNPs.noOutgroup.vcf

##Define populations for PGDSpider

sed -r 's/(.*)_.*/&\t\1/' allSampleNames.txt > populationDefinitions.txt  

##BayeScan

bayescan_2.1 bayescanNeutralSNPs_noOutgroup.txt -o selectionTesting -threads 40

##Find outliers with plot_bayescan.R

results <- plot_bayescan("selectionTesting_fst.txt", FDR=0.05)

write(results$outliers, file = "outliers_indices.txt", ncolumns = 1, sep = "\t")

##Match variant IDs with index number from BayeScan

awk '{ print NR, $1 }' SNPIDs.txt > SNPIDs_indexed.txt

##awk script to print only non-outlier loci

for i in `cat outliers_indices.txt`; do awk -v var=$i '{if ($1 == var) print $2;}' SNPIDs_indexed.txt ; done > outlier_IDs.txt

##Filter to exclude outlier loci from VCF

bcftools view --exclude ID==@outlier_IDs.txt ../VCFs/pruned.neutralSNPs.noOutgroup.vcf > neutralSNPS.noOutliers.vcf

##Edit population definitions file to segregate by region

for i in `cat Central-Valley1_accessions.txt`; do 
sed -i "s/\(.*\s\)$i/\1CV1/" populationDefinitionsByRegion.txt; 
done

for i in `cat Central-Valley2_accessions.txt`; do 
sed -i "s/\(.*\s\)$i/\1CV2/" populationDefinitionsByRegion.txt; 
done

for i in `cat Central-Valley3_accessions.txt`; do 
sed -i "s/\(.*\s\)$i/\1CV3/" populationDefinitionsByRegion.txt; 
done

for i in `cat Central-Valley4_accessions.txt`; do 
sed -i "s/\(.*\s\)$i/\1CV4/" populationDefinitionsByRegion.txt; 
done

for i in `cat Coast_accessions.txt`; do 
sed -i "s/\(.*\s\)$i/\1Coast/" populationDefinitionsByRegion.txt; 
done

for i in `cat Highland_accessions.txt`; do 
sed -i "s/\(.*\s\)$i/\1Highland/" populationDefinitionsByRegion.txt; 
done

## Remove loci with more than 2% missing data (to eliminate potentially uninformative loci from clusterin analysis)

vcftools --vcf neutralSNPS.noOutliers.vcf --max-missing 0.98 --recode-INFO-all --recode --out neutralSNPs.noOutliers.trimMissing
